# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bill.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
import sqlite3
from PyQt5.QtWidgets import  QApplication , QMainWindow ,QTableWidgetItem ,QMessageBox,QAbstractItemView,QCompleter,QTreeWidgetItem,QLineEdit

from PyQt5.QtGui import QStandardItemModel,QPixmap
from PyQt5.QtCore import QDate 
import sys


import time
from datetime import datetime


class Bill(QMainWindow):
    def __init__(self,*args,**kwargs):
        super(Bill,self).__init__(*args,**kwargs)
        self.setupUi(self)
        self.search_name ()
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(418, 383)
        """search box """
        self.name_search_box = QtWidgets.QComboBox(Form)
        self.name_search_box.setGeometry(QtCore.QRect(250, 50, 131, 22))
        self.name_search_box.setEditable(True)
        self.name_search_box.setObjectName("name_search_box")
        self.name_search_box.currentTextChanged.connect(self.show_price) 

        self.spinBox = QtWidgets.QSpinBox(Form)
        self.spinBox.setGeometry(QtCore.QRect(150, 50, 42, 22))
        self.spinBox.setProperty("value", 1)
        self.spinBox.setObjectName("spinBox")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(0, 110, 351, 191))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(230, 10, 151, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(60, 10, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(0, 330, 151, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(150, 330, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.toolButton = QtWidgets.QToolButton(Form)
        self.toolButton.setGeometry(QtCore.QRect(310, 80, 25, 19))
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.enter_bill)
        rMyIcon = QtGui.QPixmap("add.png")
        self.toolButton.setIcon(QtGui.QIcon(rMyIcon))

        self.delete_btn = QtWidgets.QToolButton(Form)
        self.delete_btn.setGeometry(QtCore.QRect(200, 80, 25, 19))
        self.delete_btn.setObjectName("delete_btn")
        self.delete_btn.setEnabled(False)
        self.delete_btn.clicked.connect(self.item_delete)
        MyIcon = QtGui.QPixmap("delete.png")
        self.delete_btn.setIcon(QtGui.QIcon(MyIcon))

        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(340, 80, 47, 13))
        self.label_4.setObjectName("label_4")

        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(230, 80, 47, 13))
        self.label_6.setObjectName("label_6")

        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 50, 113, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(20, 10, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(290, 330, 111, 23))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.temp_storage={}
        self.bill_temp_storage={}
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.summ = 0
        self.pushButton.clicked.connect(self.close_it)
        self.setWindowIcon(QtGui.QIcon('b3d.png'))
        
        self.listWidget.itemSelectionChanged.connect(self.btn_enable) 
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "الفاتورة"))
        self.label.setText(_translate("Form", "البحث عن طريق الاسم"))
        self.label_2.setText(_translate("Form", "العدد"))
        self.label_3.setText(_translate("Form", "مجموع الفاتورة"))
        self.toolButton.setText(_translate("Form", "..."))
        self.label_4.setText(_translate("Form", "اضافة"))
        self.label_6.setText(_translate("Form", "حذف"))
        self.label_5.setText(_translate("Form", "السعر"))
        self.pushButton.setText(_translate("Form", "ادخال"))
    def set_completer(self) :
        if self.radioButton.isChecked():
            self.radioButton.setChecked(False)
        lst=[]
        
        conn = sqlite3.connect('mytable.db')
        curs =conn.cursor()
        database_data= curs.execute('SELECT id FROM tasks  ')
        for indx, i in enumerate(database_data):
            x=str(i).replace('(','')
            x=x.replace(')','')
            x=x.replace(',','')
            lst.append(x)
        self.completer=QCompleter(lst)
        self.name_search_box.setCompleter(self.completer) 
        conn.close()
    def search_name(self) :

        
        lst=[]
        
        conn = sqlite3.connect('mytable.db')
        curs =conn.cursor()
        database_data= curs.execute('SELECT name FROM tasks  ')
        for indx, i in enumerate(database_data):
               
            x=str(i).replace('(','')
            x=x.replace(')','')
            x=x.replace(',','')
            x=x.replace("'","")
            lst.append(x)
              
        self.completer=QCompleter(lst)
        self.name_search_box.setCompleter(self.completer)
           
        conn.close() 
        
    def enter_bill (self) :
        
        element=self.name_search_box.currentText()
        number=self.spinBox.value()
        if self.lineEdit_2.text() != '' :
            price =int(self.lineEdit_2.text())  * number
        
            self.summ +=price
        if element != '' and number > 0 and price != '' :
            break_now=self.count_number(element,number)
           
            if break_now !=0 :
                if f'{element}' in self.temp_storage :
                    self.temp_storage[f'{element}'] +=number
                else :      
                    self.temp_storage[f'{element}']=number 
                
                thebill='#العنصر'+ ' ' +f' {element}'+ '      | ' +'العدد'+ ' ' +f'{number} '+ ' |     ' + 'السعر' + f'{price} '
                self.listWidget.addItem(thebill)
                if self.lineEdit.text() == '' :
                    total=str(self.summ) + ' SP'
                    self.lineEdit.insert(total)
                else :
                    self.lineEdit.clear()
                    total=str(self.summ) + ' SP'
                    self.lineEdit.insert(total)             

    def show_price(self,value):
        
        self.name_search_box.blockSignals (True)
        if value is not None :
            
            conn=sqlite3.connect('mytable.db')
            curs=conn.cursor()
            instru=f"SELECT sell_price FROM tasks WHERE name = '{value}'"
            try :
                x=curs.execute(instru).fetchone()
            except:
                
                return
            if x is not None :       
                selling_price=str(x).strip(')(,')
                self.lineEdit_2.clear()
                self.lineEdit_2.insert(selling_price)
                
            else :
                pass    
            conn.close()
        if self.name_search_box.signalsBlocked() :
            time.sleep(0.1)    
            self.name_search_box.blockSignals (False)                
    def write_to_bill_register(self , element , number ) :
        conn = sqlite3.connect('mytable.db')
        curs=conn.cursor()
        instru=f""" INSERT INTO bill_register (element,number ,date ) VALUES ('{element}','{number}',date('now'));"""
        curs.execute(instru)
        conn.commit()
        conn.close()
    def count_number (self,element,number) :
        global bill_temp_storage
       
        k=0
        spin_val=number
        lst=[]
        lsta=[]
        query=element
        if query != ''  :
            conn=sqlite3.connect('mytable.db')
            curs1=conn.cursor()           
            instruction1= f"SELECT number FROM tasks WHERE name = '{query}' ;"            
            try :                
                number_val=curs1.execute(instruction1)
            except:
                QMessageBox.information(self,'خطأ','تأكد من كتابة العنصر المدخل')
                return 0   
            check=number_val.fetchone()            
            if check:
                
                x=str(check).replace('(','')                
                x=x.replace(')','')
                x=x.replace(",","")
                x=int(x)
                if f'{query}' in self.bill_temp_storage :
                    

                    if self.bill_temp_storage[f'{query}'] > spin_val or self.bill_temp_storage[f'{query}']==spin_val :
                        new_number_val=self.bill_temp_storage[f'{query}'] - spin_val
                        self.bill_temp_storage[f'{query}']=new_number_val
                        if new_number_val == 0  :
                             QMessageBox.information(self,'تنبيه','انتهى العدد من العنصر')
                    else :
                        QMessageBox.warning(self,'خطأ','العدد المدخل أكبر من الموجود')
                        return 0 
                else :
                   
                    self.bill_temp_storage[f'{query}']=x
                    if self.bill_temp_storage[f'{query}'] > spin_val or self.bill_temp_storage[f'{query}']==spin_val :
                        new_number_val=self.bill_temp_storage[f'{query}'] - spin_val
                        self.bill_temp_storage[f'{query}']=new_number_val
                        if new_number_val == 0  :
                             QMessageBox.information(self,'تنبيه','انتهى العدد من العنصر')
                    else :
                        QMessageBox.warning(self,'خطأ','العدد المدخل أكبر من الموجود')
                        return 0 
                    
                             
            conn.close()
    def count_gain (self,element,number) :
        k=0
        spin_val=number
        lst=[]
        lsta=[]
        query=element
        if query !='' :
            conn=sqlite3.connect('mytable.db')
            curs=conn.cursor()
            curs1=conn.cursor()            
            instruction= f"SELECT * FROM tasks WHERE name = '{query}' ;"
            instruction1= f"SELECT number FROM tasks WHERE name = '{query}' ;"            
            data_database=curs.execute(instruction)
            number_val=curs1.execute(instruction1)           
            check=number_val.fetchone()
           
            check1=data_database .fetchone()
            
            if check:
                
                x=str(check).replace('(','')
                
                x=x.replace(')','')
                x=x.replace(",","")
                x=int(x)
                    
                
                if x > spin_val or x ==spin_val :
                    new_number_val=x - spin_val
                       
                
                else : 
                    QMessageBox.warning(self,'خطأ','العدد المدخل أكبر من الموجود')
                    return             
                instruction2= f"UPDATE tasks SET number={new_number_val} WHERE name = '{query}'; "
           
                    
                curs2=conn.cursor() 
                curs2.execute(instruction2)     
                conn.commit() 
            if check1:                
                lst=list(check1)                                  
                self.selling_register(lst,number)
            conn.close()                               
    def selling_register(self,lsta,number):
        
        x=number
        gain=x* (lsta[4]-lsta[3])
        
        tup=()
        conn=sqlite3.connect('mytable.db')
        instruction= f""" INSERT INTO selling_register
                         (
                             
                             name,
                             number,
                             selling_price,
                             date,
                             gain
                         ) 
                        VALUES(?,{x},?,date('now'),{gain})
                            """
        for j,i in enumerate(lsta) :
            if j!=2 and j !=5 and j !=3 and j !=0 :
                tup=tup+(i,)
        curs=conn.cursor()
        curs.execute(instruction,tup)
        conn.commit()
        conn.close()
    def close_it (self) :
        
        for i in self.temp_storage :
            self.count_gain(i,self.temp_storage[i])
            self.write_to_bill_register(i,self.temp_storage[i])
        
        self.close()
    def item_delete (self) :
        global temp_storage
        
        datas=self.listWidget.selectedItems()
        
        for j,i in enumerate(datas ):
           item= i.data(j)
           new_item=item.strip('# العنصر | العدد ')
           new_item=new_item.rsplit('|',2)
           thefinal=new_item[0].rsplit()
           if thefinal[0] in self.temp_storage :
               self.temp_storage.pop(f'{thefinal[0]}')
               
           self.listWidget.takeItem(self.listWidget.row(i))
          
        
    def btn_enable (self):
        self.delete_btn.setEnabled(True)               
   

             

                