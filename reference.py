# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
import sqlite3
from PyQt5.QtWidgets import  QApplication , QMainWindow ,QTableWidgetItem ,QMessageBox,QAbstractItemView,QCompleter,QTabWidget
from functools import partial
from PyQt5.QtGui import QStandardItemModel,QPixmap
from PyQt5.QtCore import QDate 
import sys 
from gain1 import Form


import time
from passwrd import password_1
from pass1 import password_2
from datetime import datetime
 






class MainWindow(QMainWindow ):
    def __init__(self , *args ,obj=None, **kwargs):
        super(MainWindow,self).__init__(*args,**kwargs)
        
        self.setupUi(self)
        self.set_completer()
        self.add_to_combobox2()
        self.find_box_completer()
        
        
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(820, 614)
        MainWindow.setFixedSize(820, 614)
        self.setWindowIcon(QtGui.QIcon('b3d.png'))
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.currentChanged.connect(self.go_check)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 811, 571))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tab.setEnabled(False)

        
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(5, 1, 641, 541))
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setRowCount(27)
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setHorizontalHeaderLabels(['ID','اسم العنصر','العدد','سعر الجملة','سعر المبيع','التاريخ'])
        
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(650, 10, 151, 351))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        """show btn """
        self.show_btn = QtWidgets.QPushButton(self.groupBox)
        self.show_btn.setGeometry(QtCore.QRect(10, 90, 141, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.show_btn.setFont(font)
        self.show_btn.setObjectName("show_btn")
     
        self.show_btn.clicked.connect(self.show_data)
        """edit btn """
        self.edit_btn = QtWidgets.QPushButton(self.groupBox)
        self.edit_btn.setGeometry(QtCore.QRect(10, 130, 141, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.edit_btn.setFont(font)
        self.edit_btn.setObjectName("edit_btn")
       
        self.edit_btn.clicked.connect(self.edit_data)
        """delete btn """
        self.delete_btn = QtWidgets.QPushButton(self.groupBox)
        self.delete_btn.setGeometry(QtCore.QRect(10, 170, 141, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.delete_btn.setFont(font)
        self.delete_btn.setObjectName("delete_btn")
        self.delete_btn.clicked.connect(self.delete_row)
        """dial """
        self.dial = QtWidgets.QDial(self.groupBox)
        self.dial.setGeometry(QtCore.QRect(30, 220, 81, 81))
        self.dial.setMaximum(50)
        self.dial.setWrapping(False)
        self.dial.setNotchesVisible(True)
        self.dial.setObjectName("dial")
        self.dial.valueChanged.connect(self.dial_change)
        self.val = self.dial.value()
    
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(40, 300, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(90, 300, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setGeometry(QtCore.QRect(16, 330, 101, 20))
        self.find_box = QtWidgets.QComboBox(self.tab)
        self.find_box.setGeometry(QtCore.QRect(650, 410, 151, 22))
        self.find_box.setEditable(True)
        self.find_box.setObjectName("find_box")
        self.toolButton = QtWidgets.QToolButton(self.tab)
        self.toolButton.setGeometry(QtCore.QRect(720, 440, 25, 19))
        self.toolButton.setObjectName("toolButton")
        rMyIcon = QtGui.QPixmap("search.png")
        self.toolButton.setIcon(QtGui.QIcon(rMyIcon))
        self.toolButton.clicked.connect(self.find)
        self.label_7 = QtWidgets.QLabel(self.tab)
        self.label_7.setGeometry(QtCore.QRect(680, 380, 101, 20))
        self.label_7.setObjectName("label_7")
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        
        self.tableWidget_2 = QtWidgets.QTableWidget(self.tab_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(5, 1, 441, 541))
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.setRowCount(30)
        self.tableWidget_2.setColumnCount(4)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setHorizontalHeaderLabels(['ID','اسم العنصر','سعرالمبيع','العدد'])
        """groupbox 2 """
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_2.setGeometry(QtCore.QRect(450, 110, 361, 261))
       

        
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox.setGeometry(QtCore.QRect(200, 40, 141, 22))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(50)
        self.comboBox.setFont(font)
        self.comboBox.setEditable(True)
        self.comboBox.setObjectName("comboBox")
        self.spinBox = QtWidgets.QSpinBox(self.groupBox_2)
        self.spinBox.setGeometry(QtCore.QRect(70, 110, 42, 22))
       
        self.spinBox.setProperty('value',1)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.spinBox.setFont(font)
        self.spinBox.setObjectName("spinBox")
        """date edit"""
        self.dateEdit = QtWidgets.QDateEdit(self.groupBox_2)
        self.dateEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit.setGeometry(QtCore.QRect(40, 40, 110, 22))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.dateEdit.setFont(font)
        self.dateEdit.setObjectName("dateEdit")
        """radio btn """
        self.radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton.setGeometry(QtCore.QRect(230, 87, 121, 20))
        
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(50)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton.toggled.connect (self.search_name)

        self.label_3 = QtWidgets.QLabel(self.groupBox_2)
        self.label_3.setGeometry(QtCore.QRect(60, 90, 44, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(60)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(70, 20, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(60)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox_2)
        self.label_5.setGeometry(QtCore.QRect(250, 20, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(60)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.show_detail_btn = QtWidgets.QPushButton(self.groupBox_2)
        self.show_detail_btn.setGeometry(QtCore.QRect(90, 210, 191, 23))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        self.show_detail_btn.setFont(font)
        self.show_detail_btn.setObjectName("show_detail_btn")
        self.show_detail_btn.clicked.connect(self.show_detail)

        self.enter_password_btn = QtWidgets.QPushButton(self.tab_2)
        self.enter_password_btn.setGeometry(QtCore.QRect(654, 450, 121, 23))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        self.enter_password_btn.setFont(font)
        self.enter_password_btn.setObjectName("enter_password_btn")
        self.enter_password_btn.clicked.connect(self.check_user)


        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tab_3.setEnabled(False)
        self.tableWidget_3 = QtWidgets.QTableWidget(self.tab_3)
        self.tableWidget_3.setGeometry(QtCore.QRect(5, 1, 441, 551))
        self.tableWidget_3.setAlternatingRowColors(True)
        self.tableWidget_3.setRowCount(30)
        self.tableWidget_3.setColumnCount(4)
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setHorizontalHeaderLabels(['اسم العنصر','العدد','السعر','تاريخ المبيع'])
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_3.setGeometry(QtCore.QRect(460, 90, 331, 271))
        self.tabWidget.currentChanged.connect(self.add_to_combobox2)
        
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_2.setGeometry(QtCore.QRect(128, 30, 161, 22))
        self.comboBox_2.setEditable(False)
        self.comboBox_2.setObjectName("comboBox_2")
        """pushbutton """
        self.pushButton = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton.setGeometry(QtCore.QRect(140, 90, 151, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.daily_register)

        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.groupBox_3)
        self.commandLinkButton.setGeometry(QtCore.QRect(100, 170, 211, 41))
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.commandLinkButton.clicked.connect(self.form)
        
        self.tabWidget.addTab(self.tab_3, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 820, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.do_clear=True
        self.refresh =False
        self.tab_enable=False
        self.check_user()
        
           

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "B3D"))
        self.groupBox.setTitle(_translate("MainWindow", "المستودع"))
        self.show_btn.setText(_translate("MainWindow", "اظهار محتوى المستودع"))
        self.edit_btn.setText(_translate("MainWindow", "اضافة جديد/تعديل"))
        self.delete_btn.setText(_translate("MainWindow", "حذف من المستودع"))
        self.label.setText(_translate("MainWindow", "0"))
        self.label_2.setText(_translate("MainWindow", "50"))
        self.label_6.setText(_translate("MainWindow", "ادخال سطر فارغ"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "المستودع"))
        self.groupBox_2.setTitle(_translate("MainWindow", "المبيعات"))
        self.radioButton.setText(_translate("MainWindow", "بحث عن طريق الاسم"))
        self.label_3.setText(_translate("MainWindow", "العدد"))
        self.label_4.setText(_translate("MainWindow", "التاريخ"))
        self.label_5.setText(_translate("MainWindow", "ID / الاسم"))
        self.show_detail_btn.setText(_translate("MainWindow", "الادخال"))
        self.enter_password_btn.setText(_translate("MainWindow", "ادخال كلمة المرور"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "مبيعات"))
        self.groupBox_3.setTitle(_translate("MainWindow", "السجلات"))
        self.pushButton.setText(_translate("MainWindow", "اظهار"))
        self.commandLinkButton.setText(_translate("MainWindow", "الربح /رأس المال"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "سجلات"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.label_7.setText(_translate("MainWindow", "بحث في المستودع"))
        
    def show_data (self) :
        global refresh
        self.refresh=True
        self.tableWidget.setRowCount(0)
        conn =sqlite3.connect ('mytable.db')
        curs=conn.cursor()
        query= "SELECT * FROM tasks"
        result=curs.execute(query)
        for row_number , row_data in enumerate(result) :
            self.tableWidget.insertRow(row_number)
            for column_number , data in enumerate (row_data):
                
                self.tableWidget.setItem(row_number ,column_number ,QTableWidgetItem(str(data)))

        conn.close()
        rows=self.tableWidget.rowCount()
        for r in range(rows) :
           
            
            if self.tableWidget.item(r,2).text()=='0' :
                
                for c in range(self.tableWidget.columnCount()):

                   self.tableWidget.item(r,c).setBackground(QtGui.QColor('red'))
                    
    def edit_data(self):
        lst=[]
        cells=[]
        k=0
        empty_rows=True
        Truth=True
        global refresh
        self.refresh=False
        row_numbers=self.tableWidget.rowCount()
        
        for i in range(row_numbers) :
            
            for j in range(self.tableWidget.columnCount()) :
                
                thecell=self.tableWidget.item(i,j)
                
                if thecell:
                    if thecell.text():
                       
                       lst.append(thecell.text())
                       
                else:
                    
                    continue
                    
            if len(lst) == 6 :
                self.update_data(lst,i)
                lst.clear()
                
            elif len(lst) > 0 and len(lst) <6 :
                QMessageBox.warning(self, 'خطأ' ,
                                     f'غير ممكن ادخال قيم فارغة في السطر {i+1}')
                lst.clear()                    
                return                    
                
            else :
                
                self.tableWidget.setRowCount(row_numbers+1)
                self.tableWidget.insertRow(row_numbers+1)
                empty_rows=False
                lst.clear()           
        if empty_rows :
            self.tableWidget.setRowCount(row_numbers+1)
            self.tableWidget.insertRow(row_numbers)
        if self.do_clear :    
           self.tableWidget.clearContents()           
        
    def update_data(self ,task ,m) :
        tup=()
        task_new=self.to_int(task,m)
        if task_new is None:
            return    
        else:    
            for j,i in enumerate(task_new):
                if j !=0:
                    tup=tup + (i,)
            conn=sqlite3.connect('mytable.db')
            instruction=f''' REPLACE INTO tasks
                        (id,
                        name ,
                        number,
                        cost_price,
                        sell_price ,
                        insert_date )
                        VALUES ({task_new[0]},?,?,?,?,?)'''
           
            curs=conn.cursor()
            try :
               curs.execute(instruction ,tup)
            except:
                QMessageBox.warning(self,'خطأ',f'لايمكن ادخال البيانات {m}')
                return   
            
            conn.commit()                              
            conn.close()
    def to_int(self,lst,m):
        global do_clear
        task=[]
        if type(lst) == list :
            for j,i in enumerate(lst) :
                if j == 0 or j==2 or j==3 or j==4 :
                    try:
                      task.append(int(i))
                    except  :
                        QMessageBox.warning(self,'خطأ',
                        f'متوقع ادخال ارقام في العمود{j+1} والسطر {m+1}')
                        self.do_clear=False
                        
                        return
                        
                else:
                    task.append(i)
        self.do_clear=True            
        return task
    def check_row (self) :
        m=0
        lst=[]
        row_numbers=self.tableWidget.rowCount()
        for i in range(row_numbers) :
            for j in range(self.tableWidget.columnCount()) :
                thecell=self.tableWidget.item(i,j)
                
                if thecell:
                    
                    if thecell.text():
                       lst.append(thecell.text()) 
                else:
                    continue
            if len(lst) == 6 :
                m+=1
        self.tableWidget.setRowCount(m+5)
    def dial_change (self):
        global val
        rows=self.tableWidget.rowCount()
        increase= int(rows/2)
        value=self.dial.value()
        if value > self.val :
            self.val = value
            self.tableWidget.setRowCount( rows +1)
        else :
            
            self.val= value
            self.tableWidget.setRowCount(rows-1)
    def delete_row (self) :
        j=-1
        indexes=[]
        lst_rows=[]
        lst=self.tableWidget.selectedRanges()
        for i in lst :
         
           for j in range(i.topRow(),i.bottomRow()+1):
                print(j)
                print(i.topRow(),i.bottomRow())
                for n in range(self.tableWidget.columnCount()):
                    thecell=self.tableWidget.item(j,n)
                    print(f'before{j}and{n}')
                    if thecell:
                       if thecell.text():
                           print(j,n)
                           indexes.append(self.tableWidget.item(j,n).text())
                print(indexes)    
                if len(indexes) == 6 :
                    lst_rows.append(j)
                    self.delete_from_database(indexes)
                    indexes.clear()
        for m in lst_rows :
            print(lst_rows)
            self.tableWidget.removeRow(m)
        self.tableWidget.clearContents()                
    def delete_from_database(self,indexes) :

        conn=sqlite3.connect('mytable.db')
   
        curs=conn.cursor()
        instruction=f"DELETE FROM tasks WHERE id= {indexes[0]} "
        
        try:
           curs.execute(instruction)
           conn.commit()
        except:
            QMessageBox.warning(self,'خطأ','هناك حطأ ما قد تكون البيانات غير موجودة ')   
        conn.close() 

    def set_completer(self) :
        if self.radioButton.isChecked():
            self.radioButton.setChecked(False)
        lst=[]
        
        conn = sqlite3.connect('mytable.db')
        curs =conn.cursor()
        database_data= curs.execute('SELECT id FROM tasks  ')
        for indx, i in enumerate(database_data):
            x=str(i).replace('(','')
            x=x.replace(')','')
            x=x.replace(',','')
            lst.append(x)
        self.completer=QCompleter(lst)
        self.comboBox.setCompleter(self.completer) 
        conn.close()
    def search_name(self) :

        if self.radioButton.isChecked ( ) :
           lst=[]
        
           conn = sqlite3.connect('mytable.db')
           curs =conn.cursor()
           database_data= curs.execute('SELECT name FROM tasks  ')
           for indx, i in enumerate(database_data):
               
               x=str(i).replace('(','')
               x=x.replace(')','')
               x=x.replace(',','')
               x=x.replace("'","")
               lst.append(x)
              
           self.completer=QCompleter(lst)
           self.comboBox.setCompleter(self.completer)
           conn.close() 
        else : 
            self.set_completer() 
    def find_box_completer (self) :
        lst=[]
    
        conn = sqlite3.connect('mytable.db')
        curs =conn.cursor()
        database_data= curs.execute('SELECT name FROM tasks  ')
        for indx, i in enumerate(database_data):
               
            x=str(i).replace('(','')
            x=x.replace(')','')
            x=x.replace(',','')
            x=x.replace("'","")
            lst.append(x)
              
        self.completer=QCompleter(lst)
        self.find_box.setCompleter(self.completer)
        conn.close()
    def find (self):
        find_in_base=True
        put_row=True
        target=self.find_box.currentText()
        last_rows=self.tableWidget.rowCount()
        for i in range(last_rows) :
            thecell=self.tableWidget.item(i,1)
            if thecell :
                if  target == thecell.text():
                    
                    self.tableWidget.scrollToItem(thecell)
                    self.tableWidget.selectRow(i)
                    find_in_base=False
        if find_in_base :
            conn = sqlite3.connect('mytable.db')
            curs =conn.cursor()
            database_data= curs.execute(f'SELECT * FROM tasks WHERE name="{target}"  ')
            tup_data=database_data.fetchall()
            if tup_data :
                lst=list(tup_data[0])
                for i in range(last_rows) :
                   thecell=self.tableWidget.item(i,1)
                   if thecell ==None :
                        for k,j in enumerate(lst) :
                            self.tableWidget.setItem(i,k,QTableWidgetItem(str(j)))
                            put_row=False
                        return    
                if put_row : 
                    self.tableWidget.setRowCount(last_rows+1)
                    
                    for k,j in enumerate(lst) :
                           self.tableWidget.setItem(last_rows+1,k,QTableWidgetItem(str(j)))
                           
            else :
                QMessageBox.information(self,'خطأ','يتعذر ايجاد العنصر المدخل  ')
                                     
    def show_detail (self,element,number) :
        
        k=0
        spin_val=number
        lst=[]
        lsta=[]
        query=element
        if query !='' :
            conn=sqlite3.connect('mytable.db')
            curs=conn.cursor()
            curs1=conn.cursor()
            
            if self.radioButton.isChecked():
                instruction= f"SELECT * FROM tasks WHERE name = '{query}' ;"
                instruction1= f"SELECT number FROM tasks WHERE name = '{query}' ;"
            else:
                instruction=f"SELECT * FROM tasks WHERE id = {query}; " 
                instruction1= f"SELECT number FROM tasks WHERE id = {query} ;"
            try :
                data_database=curs.execute(instruction)
                number_val=curs1.execute(instruction1)
            except:
                QMessageBox.information(self,'خطأ','تأكد من كتابة العنصر المدخل')
                return    
            check=number_val.fetchone()
           
            check1=data_database .fetchone()
            
            if check:
                
                x=str(check).replace('(','')
                
                x=x.replace(')','')
                x=x.replace(",","")
                x=int(x)
                    
                
                if x > spin_val or x ==spin_val :
                    new_number_val=x - spin_val
                       
                    if new_number_val == 0 :
                        QMessageBox.information(self,'تنبيه','انتهى العدد من العنصر')
                else : 
                    QMessageBox.warning(self,'خطأ','العدد المدخل أكبر من الموجود')
                    return
                        
                if self.radioButton.isChecked():
                     instruction2= f"UPDATE tasks SET number={new_number_val} WHERE name = '{query}'; "
           
                else:
                    instruction2= f"UPDATE tasks SET number={new_number_val} WHERE name = {query}; "     
                curs2=conn.cursor() 
                curs2.execute(instruction2)     
                conn.commit()
            last_row = self.tableWidget_2.rowCount()
  
            if check1:
                

                lst=list(check1) 

                for row_numbers in range (last_row):
                    thecell=self.tableWidget_2.item(row_numbers,0)
                    if thecell ==None:  
                        
                        
                        for n,i  in enumerate(lst) :
                            
                            if n != 2 and n !=3 and n!=5 :
                                
                                self.tableWidget_2.setItem(row_numbers ,k, QTableWidgetItem(str(i)))
                                k+=1
                                             
                        self.tableWidget_2.setItem(row_numbers,3 , QTableWidgetItem(str(self.spinBox.value())))
                        break
                    
                conn.close()
                print(lst)
                
                    
                self.selling_register(lst)
    def scoll_down (self) :
        QtCore.QTimer.singleShot(0, self.view.scrollToBottom)
    def selling_register(self,lsta):
        
        x=self.spinBox.value()
        gain=x* (lsta[4]-lsta[3])
        
        tup=()
        conn=sqlite3.connect('mytable.db')
        instruction= f""" INSERT INTO selling_register
                         (
                             
                             name,
                             number,
                             selling_price,
                             date,
                             gain
                         ) 
                        VALUES(?,{x},?,date('now'),{gain})
                            """
        for j,i in enumerate(lsta) :
            if j!=2 and j !=5 and j !=3 and j !=0 :
                tup=tup+(i,)
        curs=conn.cursor()
        curs.execute(instruction,tup)
        conn.commit()
        conn.close()
         
    def daily_register (self) :
        
        date=self.comboBox_2.currentText()
        if date == "":
            self.add_to_combobox2()
            return
        conn=sqlite3.connect('mytable.db')
        instruction= f""" SELECT * FROM selling_register WHERE date = {date}"""
        
        curs=conn.cursor()
        data=curs.execute(instruction)
        
        for i ,j  in enumerate(data) :
            for k, n in enumerate(j) :
               if k != 4 : 
                  self.tableWidget_3.setItem(i,k,QTableWidgetItem(str(n)))                                                                              
        conn.close()    
    def add_to_combobox2(self):
        self.comboBox_2.clear()
        lst=[]
        conn = sqlite3.connect('mytable.db')
        curs=conn.cursor()
        instruction= "SELECT date FROM  selling_register;"
        date=curs.execute(instruction)
        for i in date :
            x=str(i).replace('(','')
            x=x.replace(')','')
            x=x.replace(',','')
            if x not in lst :
                lst.append(x)
           
        conn.close()
        self.comboBox_2.addItems(lst)
    def form(self):
        self.subwin=Form()
        self.subwin.show()
    
    def fuck_user(self):
        conn=sqlite3.connect('goodlife.db')
        curs=conn.cursor()
        instru="""SELECT COUNT() FROM safe WHERE user_name !='' AND user_password  != '' ;"""
        
          
        
        data =curs.execute(instru)
       
        if data :

            
            return data
        else :
            
            return 0    
        conn.close()
        
    def check_user(self):
        
        lst=[]
        data=self.fuck_user()
        
        if data :
         
        
            for i in data :
                x=str(i).replace('(','')
                x=x.replace(')','')
                x=x.replace(',','')
                lst.append(int(x))
             
            if lst[0] > 0 :
                
                
                self.check_password()
                
            else :
                
                self.create_password()
                
              
             
        else :
            
            return 0        

    def check_password( self):
        
        self.p=password_2()
        self.p.show()
        self.p.activateWindow()
        
    def create_password(self):
        self.p1=password_1()
        self.p1.show()
        self.p1.activateWindow()                         
    def go_check(self) :
        with open ('var.txt','r+') as f :
            var=f.readlines(3)
            f.truncate(5)
        print(len(var))    
        if var[0]=='B3d' :
            self.tab.setEnabled(True) 
            self.tab_3.setEnabled(True)
           
             
if __name__ == "__main__":

    App = QApplication(sys.argv)

    window = MainWindow()
    
    window.show()
    App.exec_()                                                      